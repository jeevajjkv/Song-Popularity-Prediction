# Import required libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns

# Step 1: Load the dataset
# Replace 'songs.csv' with your dataset path
data = pd.read_csv('songs.csv')

# Display basic info
print("Dataset Info:")
print(data.info())

# Step 2: Data Preprocessing
# Check for missing values
print("\nMissing values per column:")
print(data.isnull().sum())

# Drop rows with missing values (or handle them appropriately)
data = data.dropna()

# Select relevant features and the target variable
# Features like tempo, danceability, energy, valence
# Target: Popularity
features = ['tempo', 'danceability', 'energy', 'valence']
target = 'popularity'

X = data[features]
y = data[target]

# Step 3: Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 4: Feature Scaling
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Step 5: Model Building - Random Forest Regressor
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Step 6: Predictions
y_pred = model.predict(X_test)

# Step 7: Evaluate the Model
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print("\nModel Evaluation:")
print(f"Mean Squared Error: {mse:.2f}")
print(f"Root Mean Squared Error: {rmse:.2f}")
print(f"R2 Score: {r2:.2f}")

# Step 8: Feature Importance
feature_importances = model.feature_importances_
feature_importances_df = pd.DataFrame({'Feature': features, 'Importance': feature_importances})
feature_importances_df = feature_importances_df.sort_values(by='Importance', ascending=False)

# Visualize feature importance
plt.figure(figsize=(8, 6))
sns.barplot(x='Importance', y='Feature', data=feature_importances_df)
plt.title('Feature Importance')
plt.show()

# Optional: Save the model
import joblib
joblib.dump(model, 'song_popularity_model.pkl')
print("\nM
